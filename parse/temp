 /*---------------------- statements -------------------------*/

statement 	:	{printf("assignment\n");}  assignment  SEMI /* it only go into the first line */
			|	{printf("f_call\n");}      f_call SEMI
			|	{printf("if\n");}          if
			|	{printf("if_else\n");}     if_else
			|	{printf("while\n");}       while
			|	{printf("code_block\n");}  code_block
			|
			;

assignment  : 	{printf("ID\n");}	    ID EQUAL expression 
            | 	{printf("strptr\n");}   strptr EQUAL expression 
            |	{printf("DEREF\n");}    DEREF expression EQUAL expression  /* ?????????????? */
            ;

f_call   	: 	f_call_lhs EQUAL ID LP call_paras RP    
            ;

f_call_lhs	:	ID
			|	strptr			/* intptr has ID as its first*/
			;

if 			:	IF LP expression RP LBRACE b_o_n_s RBRACE
			;

if_else 	:	if ELSE LBRACE b_o_n_s RBRACE
			;

while 		:	WHILE LP expression RP LBRACE b_o_n_s RBRACE
			;

b_o_n_s 	:   statement   b_o_n_s
            |
            ;

code_block	:	LBRACE content RBRACE
			;

content		:	code_block2 var_dec code_block2 RBRACE code_block2
			;

code_block2	:	LBRACE content RBRACE
			|
			;

/*------------------------------------------------------------*/




call_paras  : 	expression para_more
            |
            ;

para_more   :   COMMA call_paras
            |
            ;

expression 	: 	single single_more 
			;

single_more	:	operator single single_more
			|
			;

single 		: 	ID
            | 	TRUE
            | 	FALSE
            | 	INT
            | 	intptr
            | 	strptr
            | 	unarys single
            ;

intptr		:	ID LBRAKET expression RBRAKET			/* ?????????????? */
			;

strptr		:	ID LBRAKET expression RBRAKET			/* ?????????????? */
			;

unarys		:	unary unarys
			|
			;

unary 		:	NOT
			|	PLUS
			|	MINUS
			|	ADDRESS
			|	DEREF
			;

operator 	:	NOT
			|	PLUS
			|	MINUS
			|	ADDRESS
			|	DEREF
			|	TIMES
			|	DIVIDE
			;