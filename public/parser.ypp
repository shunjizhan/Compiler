%{
    #include <stdio.h>
    #include <stdlib.h>
    #define YYDEBUG 1

    int yylex(void);     /* lexical analyzer */
    void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose

/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */

%%

/** WRITE ME:
 *  This is the language from Project 1. You need to put the productions for
 *  the grammar for the language for this project here.
 */

List    : List Expr '.' {printf("parsed expresion\n");}
	| Expr '.' {printf("parsed expresion\n");}
        ;

Expr    : Expr '*' Expr 
        | Expr '+' Expr 
        | Expr '-' Expr
        | Expr '%' Expr
        | 'n'
        | '(' Expr ')'
        ;

%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    return;
}
